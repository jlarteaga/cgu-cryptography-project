@startuml

interface Cipher {
    String encrypt(String plainText)
    String decrypt(String encryptedText)
}

class SubstitutionCipher implements Cipher {
    - char[] baseAlphabet;
    - char[] cipherAlphabet;
    - Map<Character, Integer> encryptionAlphabetMapping;
    - Map<Character, Integer> decryptionAlphabetMapping;

    SubstitutionCipher(char[] baseAlphabet, char[] cipherAlphabet)
    - {static} String substituteString(String input, Map<Character, Character> alphabetMapping)
    void setAlphabets(char[] baseAlphabet, char[] cipherAlphabet)
    void setBaseAlphabet(char[] baseAlphabet)
    void setCipherAlphabet(char[] cipherAlphabet)
    int getAlphabetSize()
    char[] getBaseAlphabet()
    char[] getCipherAlphabet()
    - void buildAlphabetMappings()
}

class CaesarCipher implements Cipher {
    SubstitutionCipher innerCipher
    int offset;

    CaesarCipher(char[] alphabet, int offset)
    - {static} void validateAlphabet(char[] alphabet)
    - {static} void normalizeOffset(int offset, alphabet[])
    - {static} char[] generateCipherAlphabet(char[] baseAlphabet, int normalizedOffset)
    setOffset(int offset)
    getOffset(int offset)
}

class FileValidator {
    {static} void validateThatIsDirectory(Path path)
    {static} void validateThatIsRegularFile(Path path)
    {static} void validateThatFileExists(Path path)
    {static} void validateThatFileDoesNotExist(Path path)
}

class FileProcessor {
    - int batchSize
    - Charset defaultCharset

    FileProcessor(int batchSize, Charset defaultCharset)
    {static} void validateCharset(Charset charset)
    {static} void validateBatchSize(Charset charset)
    void transformFile(Path input, Path output, UnaryOperator<String> transformer)

}

class Alphabet {
    - Set<Character> alphabet
    - char separator

    - {static} Set<Character> generateAlphabetSet(char[] alphabet)
    - {static} void validateSeparator(Set<Character> alphabet, char separator)
    boolean contains(char character)
    Set<Character> getAlphabetSet()
    char getSeparator()
}

class AlphabetManager {
    {static} void save(Alphabet alphabet, Path filePath)
    {static} Alphabet load(Path filePath)
}

AlphabetManager .. Alphabet

class Normalizer {
    Alphabet alphabet

    String normalize(String input)
}

class NGramLanguageModel {
    - String language
    - int nGramSize
    - Alphabet alphabet
    - Map<String, Integer> frequencyMap
    - Map<String, Double> probabilityMap
    - Normalizer normalizer
    - double smoothingConstant

    {static} void validateNGramSize(int nGramSize)
    {static} void validateFrequencyMap(Map frequencyMap, int nGramSize)
    {static} void validateSmoothingConstant(double smoothingConstant)
    {static} int calculateNumberOfNGrams(int normalizedInputSize, int nGramSize)
    {static} Map<String, Double> generateProbabilityMap(Map frequencyMap, int nGramSize)
    {static} Map<String, Integer> buildFrequencyMap(List<String> input, Alphabet alphabet, int nGramSize) {
    double calculateProbability(String input, boolean isNormalized)
    double calculatePerplexity(String input, boolean isNormalized)
    String getLanguage()
    int getNGramSize()
    Alphabet getAlphabet()
    Map<String, Integer> getFrequencyMap()
    Map<String, Double> getProbabilityMap()
}

class NGramLanguageModelManager {
    {static} NGramLanguageModel load(Path input)
    {static} void save(NGramLanguageModel model, Path output)
    {static} NGramLanguageModel train(Path input, String language, int nGramSize, Alphabet alphabet, double smoothingConstant)
}

FileValidator -- FileProcessor
NGramLanguageModel -- Normalizer
Alphabet -- Normalizer

@enduml
